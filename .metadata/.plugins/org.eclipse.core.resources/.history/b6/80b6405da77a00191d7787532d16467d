var Z = function (e, t) {
  return new Z.fn.init(e, t)
},
ee = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
te = /^-ms-/,
ne = /-([\da-z])/gi,
re = function (e, t) {
  return t.toUpperCase()
};
Z.fn = Z.prototype = {
jquery: K,
constructor: Z,
selector: "",
length: 0,
toArray: function () {
  return _.call(this)
},
get: function (e) {
  return null != e ? 0 > e ? this[e + this.length] : this[e] : _.call(this)
},
pushStack: function (e) {
  var t = Z.merge(this.constructor(), e);
  return t.prevObject = this, t.context = this.context, t
},
each: function (e, t) {
  return Z.each(this, e, t)
},
map: function (e) {
  return this.pushStack(Z.map(this, function (t, n) {
    return e.call(t, n, t)
  }))
},
slice: function () {
  return this.pushStack(_.apply(this, arguments))
},
first: function () {
  return this.eq(0)
},
last: function () {
  return this.eq(-1)
},
eq: function (e) {
  var t = this.length,
    n = +e + (0 > e ? t : 0);
  return this.pushStack(n >= 0 && t > n ? [this[n]] : [])
},
end: function () {
  return this.prevObject || this.constructor(null)
},
push: X,
sort: B.sort,
splice: B.splice
}, Z.extend = Z.fn.extend = function () {
var e, t, n, r, i, o, s = arguments[0] || {},
  a = 1,
  u = arguments.length,
  l = !1;
for ("boolean" == typeof s && (l = s, s = arguments[a] || {}, a++), "object" == typeof s || Z.isFunction(s) || (s = {}), a === u && (s = this, a--); u > a; a++)
  if (null != (e = arguments[a]))
    for (t in e) n = s[t], r = e[t], s !== r && (l && r && (Z.isPlainObject(r) || (i = Z.isArray(r))) ? (i ? (i = !1, o = n && Z.isArray(n) ? n : []) : o = n && Z.isPlainObject(n) ? n : {}, s[t] = Z.extend(l, o, r)) : void 0 !== r && (s[t] = r));
return s
}, Z.extend({
expando: "jQuery" + (K + Math.random()).replace(/\D/g, ""),
isReady: !0,
error: function (e) {
  throw new Error(e)
},
noop: function () { },
isFunction: function (e) {
  return "function" === Z.type(e)
},
isArray: Array.isArray,
isWindow: function (e) {
  return null != e && e === e.window
},
isNumeric: function (e) {
  return !Z.isArray(e) && e - parseFloat(e) + 1 >= 0
},
isPlainObject: function (e) {
  return "object" === Z.type(e) && !e.nodeType && !Z.isWindow(e) && !(e.constructor && !G.call(e.constructor.prototype, "isPrototypeOf"))
},
isEmptyObject: function (e) {
  var t;
  for (t in e) return !1;
  return !0
},
type: function (e) {
  return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? V[Y.call(e)] || "object" : typeof e
},
globalEval: function (e) {
  var t, n = eval;
  e = Z.trim(e), e && (1 === e.indexOf("use strict") ? (t = J.createElement("script"), t.text = e, J.head.appendChild(t).parentNode.removeChild(t)) : n(e))
},
camelCase: function (e) {
  return e.replace(te, "ms-").replace(ne, re)
},
nodeName: function (e, t) {
  return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()
},
each: function (e, t, r) {
  var i, o = 0,
    s = e.length,
    a = n(e);
  if (r) {
    if (a)
      for (; s > o && (i = t.apply(e[o], r), i !== !1); o++);
    else
      for (o in e)
        if (i = t.apply(e[o], r), i === !1) break
  } else if (a)
    for (; s > o && (i = t.call(e[o], o, e[o]), i !== !1); o++);
  else
    for (o in e)
      if (i = t.call(e[o], o, e[o]), i === !1) break;
  return e
},
trim: function (e) {
  return null == e ? "" : (e + "").replace(ee, "")
},
makeArray: function (e, t) {
  var r = t || [];
  return null != e && (n(Object(e)) ? Z.merge(r, "string" == typeof e ? [e] : e) : X.call(r, e)), r
},
inArray: function (e, t, n) {
  return null == t ? -1 : U.call(t, e, n)
},
merge: function (e, t) {
  for (var n = +t.length, r = 0, i = e.length; n > r; r++) e[i++] = t[r];
  return e.length = i, e
},
grep: function (e, t, n) {
  for (var r, i = [], o = 0, s = e.length, a = !n; s > o; o++) r = !t(e[o], o), r !== a && i.push(e[o]);
  return i
},
map: function (e, t, r) {
  var i, o = 0,
    s = e.length,
    a = n(e),
    u = [];
  if (a)
    for (; s > o; o++) i = t(e[o], o, r), null != i && u.push(i);
  else
    for (o in e) i = t(e[o], o, r), null != i && u.push(i);
  return z.apply([], u)
},
guid: 1,
proxy: function (e, t) {
  var n, r, i;
  return "string" == typeof t && (n = e[t], t = e, e = n), Z.isFunction(e) ? (r = _.call(arguments, 2), i = function () {
    return e.apply(t || this, r.concat(_.call(arguments)))
  }, i.guid = e.guid = e.guid || Z.guid++ , i) : void 0
},
now: Date.now,
support: Q
}), Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (e, t) {
V["[object " + t + "]"] = t.toLowerCase()
});